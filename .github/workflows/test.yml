name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published
      - created
      - edited

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      matrix:
        os:
          - ubuntu-20.04  # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          - macos-11.0    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
          - windows-2022  # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
        go-version:
          - 1.15.x
          - 1.16.x
          - 1.17.x
        neovim-version:
          - v0.5.1
          - nightly
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Set flag environment variable
      run: |
        echo "OS=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        echo "GO_VERSION=$(echo ${{ matrix.go-version }} | cut -d. -f-2)" >> $GITHUB_ENV
        echo "NVIM_VERSION=$(if [ ${{ matrix.neovim-version }} != 'nightly' ]; then echo 'stable'; else echo 'nightly'; fi)" >> $GITHUB_ENV

    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache Go module and build cache
      uses: actions/cache@v2
      with:
        key: go-${{ env.OS }}-${{ hashFiles('**/go.mod') }}
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          '%LocalAppData%\go-build'
        restore-keys: |
          go-${{ env.OS }}-

    - name: Cache neovim binary (linux)
      id: cache-nvim-linux
      uses: actions/cache@v2
      if: ${{ env.OS == 'linux' && matrix.neovim-version != 'nightly' }}
      with:
        key: nvim-${{ env.OS }}-${{ matrix.neovim-version }}-no2f8ibgdwqj
        path: |
          /home/runner/nvim-${{ matrix.neovim-version }}
        restore-keys: |
          nvim-${{ env.OS }}-${{ matrix.neovim-version }}

    - name: Cache neovim binary (macOS)
      id: cache-nvim-macos
      uses: actions/cache@v2
      if: ${{ env.OS == 'macos' && matrix.neovim-version != 'nightly' }}
      with:
        key: nvim-${{ env.OS }}-${{ matrix.neovim-version }}-no2f8ibgdwqj
        path: |
          /Users/runner/nvim-${{ matrix.neovim-version }}
        restore-keys: |
          nvim-${{ env.OS }}-${{ matrix.neovim-version }}

    - name: Cache neovim binary (Windows)
      id: cache-nvim-windows
      uses: actions/cache@v2
      if: ${{ env.OS == 'windows' && matrix.neovim-version != 'nightly' }}
      with:
        key: nvim-${{ env.OS }}-${{ matrix.neovim-version }}-no2f8ibgdwqj
        path: |
          C:\Users\runneradmin\nvim-${{ matrix.neovim-version }}
        restore-keys: |
          nvim-${{ env.OS }}-${{ matrix.neovim-version }}

    - name: Install neovim binary
      uses: rhysd/action-setup-vim@v1
      if: steps.cache-nvim-linux.outputs.cache-hit != 'true' || steps.cache-nvim-macos.outputs.cache-hit != 'true' || steps.cache-nvim-windows.outputs.cache-hit != 'true'
      with:
        neovim: true
        version: ${{ matrix.neovim-version }}

    - name: gofmt
      if: ${{ env.OS != 'windows' }}
      run: |
        diff -u <(echo -n) <(gofmt -s -d .)

    - name: Test and vet
      run: |
        go vet ./...
        go test -v -race -count=1 -covermode=atomic -coverpkg=./... -coverprofile=coverage.out ./...

    - uses: codecov/codecov-action@v2
      with:
        file: coverage.out
        flags: ${{ env.OS }}-${{ env.GO_VERSION }}-${{ env.NVIM_VERSION }}
        fail_ci_if_error: true
